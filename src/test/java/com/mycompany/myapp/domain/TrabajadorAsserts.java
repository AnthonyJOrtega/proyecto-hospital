package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrabajadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadorAllPropertiesEquals(Trabajador expected, Trabajador actual) {
        assertTrabajadorAutoGeneratedPropertiesEquals(expected, actual);
        assertTrabajadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadorAllUpdatablePropertiesEquals(Trabajador expected, Trabajador actual) {
        assertTrabajadorUpdatableFieldsEquals(expected, actual);
        assertTrabajadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadorAutoGeneratedPropertiesEquals(Trabajador expected, Trabajador actual) {
        assertThat(actual)
            .as("Verify Trabajador auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadorUpdatableFieldsEquals(Trabajador expected, Trabajador actual) {
        assertThat(actual)
            .as("Verify Trabajador relevant properties")
            .satisfies(a -> assertThat(a.getIdUsuario()).as("check idUsuario").isEqualTo(expected.getIdUsuario()))
            .satisfies(a -> assertThat(a.getNombre()).as("check nombre").isEqualTo(expected.getNombre()))
            .satisfies(a -> assertThat(a.getApellido()).as("check apellido").isEqualTo(expected.getApellido()))
            .satisfies(a -> assertThat(a.getDni()).as("check dni").isEqualTo(expected.getDni()))
            .satisfies(a -> assertThat(a.getPuesto()).as("check puesto").isEqualTo(expected.getPuesto()))
            .satisfies(a -> assertThat(a.getDisponibilidad()).as("check disponibilidad").isEqualTo(expected.getDisponibilidad()))
            .satisfies(a -> assertThat(a.getTurno()).as("check turno").isEqualTo(expected.getTurno()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadorUpdatableRelationshipsEquals(Trabajador expected, Trabajador actual) {
        assertThat(actual)
            .as("Verify Trabajador relationships")
            .satisfies(a -> assertThat(a.getEspecialidads()).as("check especialidads").isEqualTo(expected.getEspecialidads()))
            .satisfies(a -> assertThat(a.getCitas()).as("check citas").isEqualTo(expected.getCitas()))
            .satisfies(a -> assertThat(a.getPacientes()).as("check pacientes").isEqualTo(expected.getPacientes()))
            .satisfies(a -> assertThat(a.getDireccions()).as("check direccions").isEqualTo(expected.getDireccions()));
    }
}
